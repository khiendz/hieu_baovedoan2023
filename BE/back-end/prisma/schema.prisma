// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Book {
  BookId        Int       @id @default(autoincrement()) @map("BookId")
  Title         String
  BookTypeId    Int       @map("BookTypeId")
  ISBN          String?
  Quantity      Int?
  Location      String?
  PublicYear    DateTime?
  Img           String?
  Barcode       String    @default("")
  PublisherId   Int       @default(0)
  AuthorId      Int       @default(0)
  LateFeeTypeId Int       @default(0)

  BookType     BookType?      @relation(fields: [BookTypeId], references: [BookTypeID])
  Publisher    Publisher?     @relation(fields: [PublisherId], references: [PublisherId])
  Author       Author?        @relation(fields: [AuthorId], references: [AuthorId])
  BorrowedBook BorrowedBook[]
}

model Author {
  AuthorId    Int     @id @default(autoincrement()) @map("AuthorId")
  Name        String
  Description String?
  Book        Book[]
}

model Publisher {
  PublisherId Int     @id @default(autoincrement()) @map("PublisherId")
  Name        String
  Address     String?
  PHONE       String?
  Website     String?
  Book        Book[]
}

model BookType {
  BookTypeID  Int     @id @map("BookTypeID")
  Name        String
  Description String?
  Img         String?

  Books Book[]
}

model Member {
  MemberId     Int            @id @default(autoincrement()) @map("MemberId")
  Name         String?
  Address      String?
  Phone        Int?
  Email        String?
  JoinDate     DateTime?
  MemberRoleId Int            @default(0)
  BorrowedBook BorrowedBook[]
}

model MemberRole {
  MemberRoleId Int     @id @default(autoincrement()) @map("MemberRoleId")
  Value        String
  Description  String?
}

model BorrowedBook {
  TransactionId Int       @id @default(autoincrement()) @map("TransactionId")
  MemberId      Int       @map("MemberId")
  BookId        Int       @map("BookId")
  BorrowDate    DateTime?
  DueDate       DateTime?
  ReturnDate    DateTime?
  KateFee       Int?

  Member   Member?   @relation(fields: [MemberId], references: [MemberId])
  Book     Book?     @relation(fields: [BookId], references: [BookId])
  LateFees LateFee[]
}

model LateFee {
  LateFeeId     Int @id @default(autoincrement()) @map("LateFeeId")
  TransactionId Int @map("TransactionId")
  FeeAmount     Int

  BorrowedBook BorrowedBook @relation(fields: [TransactionId], references: [TransactionId])
  Payment      Payment[]
}

model LateFeeType {
  LateFeeTypeId Int     @id @default(autoincrement()) @map("LateFeeTypeId")
  Name          String
  Description   String
  FeeAmount     Decimal
  DateCount     Int
}

model Payment {
  PaymentID     Int       @id @default(autoincrement()) @map("PaymentID")
  LateFeeId     Int?      @map("LateFeeId")
  PaymentDate   DateTime?
  Amount        Float?
  StatePayments Int?

  LateFee LateFee? @relation(fields: [LateFeeId], references: [LateFeeId])
}

model Employee {
  EmployeeId   Int     @id @default(autoincrement()) @map("EmployeeId")
  Name         String?
  Phone        Int?
  WorkSchedule String?
  UserId       Int     @map("UserId")

  UserAccount UserAccount? @relation(fields: [UserId], references: [UserId])
}

model UserAccount {
  UserId   Int        @id @default(autoincrement()) @map("UserId")
  Username String?
  Password String?
  Role     String?
  Employee Employee[]
}

model BackupData {
  BackupId        Int     @id @default(autoincrement()) @map("BackupId")
  BackupTimestamp String?
  BackupFile      String?
}
